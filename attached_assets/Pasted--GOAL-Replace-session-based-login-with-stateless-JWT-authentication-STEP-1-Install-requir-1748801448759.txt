// GOAL: Replace session-based login with stateless JWT authentication

// üìç STEP 1: Install required dependency
// (If not already installed)
npm install jsonwebtoken

// üìç STEP 2: Add JWT utility helpers
// Create a file `server/utils/jwt.ts` with:

import jwt from "jsonwebtoken";

const JWT_SECRET = process.env.JWT_SECRET || "your-secret"; // replace with strong secret in .env

export function signToken(payload: object, expiresIn = "1h") {
  return jwt.sign(payload, JWT_SECRET, { expiresIn });
}

export function verifyToken(token: string) {
  return jwt.verify(token, JWT_SECRET);
}

// üìç STEP 3: Update the /api/login route
// In server/auth.ts or routes.ts:

app.post("/api/login", passport.authenticate("local"), (req, res) => {
  const token = signToken({
    id: req.user.id,
    email: req.user.email,
    plan: req.user.plan || "free"
  });

  res.status(200).json({ token }); // send token to frontend
});

// üìç STEP 4: Protect routes using JWT middleware
// Add a new middleware in server/middleware/auth.ts:

import { verifyToken } from "../utils/jwt";

export function authenticateJWT(req, res, next) {
  const authHeader = req.headers.authorization;
  if (!authHeader || !authHeader.startsWith("Bearer ")) {
    return res.status(401).json({ error: "Unauthorized" });
  }

  try {
    const token = authHeader.split(" ")[1];
    const user = verifyToken(token);
    req.user = user;
    next();
  } catch (err) {
    return res.status(401).json({ error: "Invalid token" });
  }
}

// üìç STEP 5: Apply the middleware to protected routes
// For example, in routes.ts or server.ts:

app.get("/api/user", authenticateJWT, async (req, res) => {
  // req.user is populated from token
  const user = await getUserById(req.user.id);
  res.json(user);
});

app.get("/api/subscription", authenticateJWT, async (req, res) => {
  // Same pattern applies here
  const subscription = await getSubscriptionForUser(req.user.id);
  res.json(subscription);
});

// üìç STEP 6: Update frontend to store and send token
// Store the token on login (in memory or localStorage)
// Send token with each fetch like:

fetch("/api/user", {
  headers: {
    "Authorization": `Bearer ${token}`
  }
});

// ‚úÖ Clean up:
// - Remove express-session usage if no longer needed
// - Remove passport session config if not using serializeUser/deserializeUser
// - Ensure JWT_SECRET is defined in .env
